name: mock-build-and-deploy

on:
  workflow_dispatch:
    inputs:
      BUILD_TIME:
        description: build length (in seconds)
        type: string
        required: true
        default: 1
      DEPLOYMENT_TIME:
        description: deployment lengths (in seconds)
        type: string
        required: true
        default: 1
      FAIL_DEPLOYMENT_TO:
        description: if not "none", will have job that deploys to given environment fail
        type: choice
        options:
          - none
          - dev
          - int
          - prod
        required: true
        default: none

permissions:
  actions: write

jobs:
  build-job:
    uses: cawfeecake/my-reusable-workflows/.github/workflows/sleep.yaml@main
    with:
      TIME_TO_SLEEP: ${{ inputs.BUILD_TIME }}
  queue-before-deploy-dev-if-needed:
    needs: [ build-job ]
#    if: |
#      (always() && ! cancelled() && ! failure()) &&
#      needs.build-job.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.action.outputs.run-id }}
    steps:
      - uses: cawfeecake/action-queue-for-job-in-run@main
        id: action
        with:
          WORKFLOW_JOB_NAME: deploy-dev
#  queue-before-deploy-dev-if-needed:
#    needs: [ build-job, determine-if-should-queue ]
#    if: |
#      (always() && ! cancelled() && ! failure()) &&
#      needs.build-job.result == 'success' &&
#      fromJson(needs.determine-if-should-queue.outputs.should-queue-map).deploy-dev
##   outputs:
##     <output-name-job-level>: ${{ steps.<step-id>.outputs.<output-name-step-level> }}
##   # outputs defined in the reusable workflow; ref'd by needs.<job-name>.outputs.<output-name-job-level>
##   # outside the workflow just like w/ steps
##   # where <job-name> is the same between workflow/job, and step-id is generated and independent of anything outside
##   runs-on: ubuntu-latest
#    uses: cawfeecake/my-reusable-workflows/.github/workflows/determine-to-queue.yaml@main
##   steps:
##     - uses: cawfeecake/action-queue-for-job-in-run@main
##       with:
##         RUN_ID: ${{ needs.determine-if-should-queue.outputs.previous-run }}
##         JOB_NAME: deploy-dev
#    with:
#      RUN_ID: ...
#      JOB_NAME: ...
  deploy-dev:
    needs: [ build-job, queue-before-deploy-dev-if-needed ]
#    if: |
#      (always() && ! cancelled() && ! failure()) &&
#      needs.build-job.result == 'success' &&
#      (needs.queue-before-deploy-dev-if-needed.result == 'success' || needs.queue-before-deploy-dev-if-needed.result == 'skipped')
    uses: cawfeecake/my-reusable-workflows/.github/workflows/sleep.yaml@main
    with:
      CONCURRENCY_KEY: dev
      ENVIRONMENT: dev
      TIME_TO_SLEEP: ${{ inputs.DEPLOYMENT_TIME }}
      SHOULD_FAIL: ${{ inputs.FAIL_DEPLOYMENT_TO == 'dev' }}
  queue-before-deploy-int-if-needed:
    needs: [ deploy-dev, queue-before-deploy-dev-if-needed ]
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.action.outputs.run-id }}
    steps:
      - uses: cawfeecake/action-queue-for-job-in-run@main
        id: action
        with:
          WORKFLOW_JOB_NAME: deploy-int
          WORKFLOW_RUN_ID: ${{ needs.queue-before-deploy-dev-if-needed.outputs.run-id }}
  deploy-int:
    needs: [ deploy-dev, queue-before-deploy-int-if-needed ]
    uses: cawfeecake/my-reusable-workflows/.github/workflows/sleep.yaml@main
    with:
      CONCURRENCY_KEY: int
      ENVIRONMENT: int
      TIME_TO_SLEEP: ${{ inputs.DEPLOYMENT_TIME }}
      SHOULD_FAIL: ${{ inputs.FAIL_DEPLOYMENT_TO == 'int' }}
  queue-before-deploy-prod-if-needed:
    needs: [ deploy-int, queue-before-deploy-int-if-needed ]
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.action.outputs.run-id }}
    steps:
      - uses: cawfeecake/action-queue-for-job-in-run@main
        id: action
        with:
          WORKFLOW_JOB_NAME: deploy-prod
          WORKFLOW_RUN_ID: ${{ needs.queue-before-deploy-int-if-needed.outputs.run-id }}
  deploy-prod:
    needs: [ deploy-int, queue-before-deploy-prod-if-needed ]
    uses: cawfeecake/my-reusable-workflows/.github/workflows/sleep.yaml@main
    with:
      CONCURRENCY_KEY: prod
      ENVIRONMENT: prod
      TIME_TO_SLEEP: ${{ inputs.DEPLOYMENT_TIME }}
      SHOULD_FAIL: ${{ inputs.FAIL_DEPLOYMENT_TO == 'prod' }}
